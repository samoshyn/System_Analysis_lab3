import streamlit as st
import numpy as np
import pandas as pd
from polynomial_builder import PolynomialBuilder
from solve import Solve, scaling
import time
from tqdm import tqdm
import itertools

st.set_page_config(layout="wide")

hide_streamlit_style = """
            <style>
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            </style>
            """
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

hide_footer_style = """
    <style>
    .reportview-container .main footer {visibility: hidden;}    
    """
st.markdown(hide_footer_style, unsafe_allow_html=True)



def search_params(df):
    
    st_x1s = [i for i in range(2, 10)]
    st_x2s = [i for i in range(2, 10)]
    st_x3s = [i for i in range(2, 10)]
    opt_err = np.inf
    opt_dct = dict()
    all_results = []
    my_bar = st.progress(0)
    combinations = [st_x1s, st_x2s, st_x3s]
    combinations = list(itertools.product(*combinations))
    b = 1 / (len(combinations) - 1)
    for percent_complete, comb in tqdm(enumerate(combinations)):
        st_x1, st_x2, st_x3 = comb

        dct = {
        'poly_type': st.session_state['method'], # 
        'input_file': st.session_state['df'],
        'samples': st.session_state['samples'],
        'dimensions': [st.session_state[i] for i in ['dim_x1', 'dim_x2', 'dim_x3', 'dim_y']], # rozmirnist' vectoriv (x1,x2,x3,y)
        'degrees': [st_x1, st_x2, st_x3], # stepin' polinoma
        'weights': st.session_state['weights'], # vagi (scaled/average)
        'lambda_multiblock': int(st.session_state['lambda_multiblock']),
        'is_save': False
            }
        #try:
        solver = Solve(dct)
        buffer, err = solver.prepare()
        solution = PolynomialBuilder(solver)
        y = np.array(solution._solution.Y_)
        f = np.array(solution._solution.F_)
        y_norm, f_norm = scaling(y, f)
        err = np.mean(np.mean(abs(y_norm - f_norm), axis=1))
        all_results.append({"degrees": ', '.join([str(st_x1), str(st_x2), str(st_x3)]),
                            "error": err})
        #print(err)
        if err < opt_err:
            opt_err = err
            opt_dct = dct
        #except:
            #continue
        my_bar.progress(b*percent_complete)
                        
    st.success('–í—Å–µ –≥–æ—Ç–æ–≤–æ! 10 –Ω–∞–π–∫—Ä–∞—â–∏—Ö —ñ—Ç–µ—Ä–∞—Ü—ñ–π –≤–∏–≤–µ–¥–µ–Ω–æ –Ω–∏–∂—á–µ')
    st.dataframe(pd.DataFrame(all_results).sort_values(by='error').iloc[:10])
    print('Top', opt_err)
    for i, step in zip(['st_x1', 'st_x2', 'st_x3'], opt_dct['degrees']):
        st.session_state[i] = step
                            
                    
    
def config_params(df):
    
    samples = st.slider('–†–æ–∑–º—ñ—Ä –≤–∏–±—ñ—Ä–∫–∏', min_value=1, max_value=len(df), value=len(df), key='samples')
    dim_x1 = st.slider('–†–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å –•1', min_value=1, max_value=5, key='dim_x1')
    dim_x2 = st.slider('–†–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å –•2', min_value=1, max_value=5, key='dim_x2')
    dim_x3 = st.slider('–†–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å –•3', min_value=1, max_value=5, key='dim_x3')
    dim_y = st.slider('–†–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å Y', min_value=1, max_value=5, key='dim_y')
    if sum([st.session_state[i] for i in ['dim_x1', 'dim_x2', 'dim_x3', 'dim_y']])>df.shape[1]:
        st.session_state['norm_params'] = False
        st.error('–ü–µ—Ä–µ–≤–∏—â–µ–Ω–∞ —Å—É–º–∞—Ä–Ω–∞ —Ä–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å –≤–∏–±—ñ—Ä–∫–∏. –ë—É–¥—å-–ª–∞—Å–∫–∞, –∑–º—ñ–Ω—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó —Ä–æ–±–æ—Ç–∏')
    else:
        st.session_state['norm_params'] = True
        method = st.radio('–í–∏–¥ —Ñ–æ—Ä–º—É–ª–∏ ùúë', ["–§–æ—Ä–º—É–ª–∞ 1 (–ö–æ–º–±—ñ–Ω–æ–≤–∏–π –¥—Ä—ñ–±)", "–§–æ—Ä–º—É–ª–∞ 2 (–ï—Ä–º—ñ—Ç)", 
                                            "–§–æ—Ä–º—É–ª–∞ 3 (–õ–∞–≥–µ—Ä—Ä)", "–§–æ—Ä–º—É–ª–∞ 4 (–ï—Ä–º—ñ—Ç —Ç–∞ –∑–º—ñ—â–µ–Ω–∏–π –ß–µ–±–∏—à–µ–≤)",
                                            "–§–æ—Ä–º—É–ª–∞ 5 (–†–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞ —Å–∏–≥–º–æ—ó–¥–∞)", "–§–æ—Ä–º—É–ª–∞ 6 (–ì—ñ–ø–µ—Ä–±–æ–ª—ñ—á–Ω–∏–π —Ç–∞–Ω–≥–µ–Ω—Å)",
                                            "–§–æ—Ä–º—É–ª–∞ 7 (–§—É–Ω–∫—Ü—ñ—è –ì—É–¥–µ—Ä–º–∞–Ω–∞)", "–§–æ—Ä–º—É–ª–∞ 8 (–õ–∞–≥–µ—Ä—Ä —Ç–∞ –§—É–Ω–∫—Ü—ñ—è –ì—É–¥–µ—Ä–º–∞–Ω–∞)",], key='method')
        grid_search = st.radio('–í–≤–µ—Å—Ç–∏ —Å—Ç–µ–ø–µ–Ω—ñ –≤—Ä—É—á–Ω—É—é —á–∏ –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –Ω–∞–π–∫—Ä–∞—â—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ?', ["–í—Ä—É—á–Ω—É", "–ü—ñ–¥—ñ–±—Ä–∞—Ç–∏"], key='grid_search')
        if grid_search=='–í—Ä—É—á–Ω—É':
            if method:
                st_x1 = st.slider('–°—Ç–µ–ø—ñ–Ω—å –¥–ª—è –•1', min_value=1, max_value=12, key='st_x1')
                st_x2 = st.slider('–°—Ç–µ–ø—ñ–Ω—å –¥–ª—è –•2', min_value=1, max_value=12, key='st_x2')
                st_x3 = st.slider('–°—Ç–µ–ø—ñ–Ω—å –¥–ª—è –•3', min_value=1, max_value=12, key='st_x3')
                
            weights = st.radio('–í–∏–¥ –≤–∞–≥—ñ–≤', ["–ù–æ—Ä–º–æ–≤–∞–Ω–µ", "–°–µ—Ä–µ–¥–Ω—î"], key='weights')
            lambda_multiblock = st.checkbox('–í–∏–∑–Ω–∞—á–∏—Ç–∏ –ª—è–º–±–¥–∞ —á–µ—Ä–µ–∑ 3 —Å–∏—Å—Ç–µ–º–∏', key='lambda_multiblock')
        else:
            st.write('–û–±–µ—Ä—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å –∫–Ω–æ–ø–∫—É "–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ —Å—Ç–µ–ø–µ–Ω—ñ"')
            weights = st.radio('–í–∏–¥ –≤–∞–≥—ñ–≤', ["–ù–æ—Ä–º–æ–≤–∞–Ω–µ", "–°–µ—Ä–µ–¥–Ω—î"], key='weights')
            lambda_multiblock = st.checkbox('–í–∏–∑–Ω–∞—á–∏—Ç–∏ –ª—è–º–±–¥–∞ —á–µ—Ä–µ–∑ 3 —Å–∏—Å—Ç–µ–º–∏', key='lambda_multiblock')
            opt = st.button('–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ —Å—Ç–µ–ø–µ–Ω—ñ')
            if opt:
                search_params(df)
        
        
def get_df(file):
    
    extension = file.name.split('.')[1]
    if extension.upper() == 'CSV':
        df = pd.read_csv(file, header=None, sep='\t')
        df = df.apply(pd.to_numeric)
    elif extension.upper() == 'XLSX':
        df = pd.read_excel(file, header=None, engine='openpyxl')
        df = df.apply(pd.to_numeric)
    
    return df

def plots(solution):
    
    st.header('–ì—Ä–∞—Ñ—ñ–∫–∏')
    cols = st.columns(solution._solution.Y.shape[1])
    for i, col in enumerate(cols):
        time.sleep(0.02)
        with col:
            col.subheader(f'–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y{i+1}')
            y = np.array(solution._solution.Y_[:, i]).reshape(-1,)
            f = np.array(solution._solution.F_[:, i]).reshape(-1,)
            y, f, y_norm, f_norm = scaling(y, f)
            err = abs(y_norm - f_norm)
            col.line_chart({"Y": y,
                           "F": f})
            col.subheader(f'–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y{i+1}_norm')
            col.line_chart({"Y_norm": y_norm,
                           "F_norm": f_norm})
            col.subheader(f'–ü–æ–º–∏–ª–∫–∞ {i+1}')
            col.line_chart({"err": err})
            col.write(f'**–°–µ—Ä–µ–¥–Ω—è –ø–æ–º–∏–ª–∫–∞**: {np.mean(err)}')

def main():
    st.sidebar.title("–í–∏–∫–æ–Ω—É–π—Ç–µ –ø–æ–∫—Ä–æ–∫–æ–≤–æ")
    select_menu = st.sidebar.radio("–ï—Ç–∞–ø–∏ ", ["–ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∞–ª–≥–æ—Ä–∏—Ç–º", "–î–æ—Å–ª—ñ–¥–∂—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏"])
    df = None
    buffer = None
    print_result = None
    if select_menu == "–ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∞–ª–≥–æ—Ä–∏—Ç–º":
        
        st.header('–ö—Ä–æ–∫ 1. –î–∞–Ω—ñ')
        st.info("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—É")
        uploaded_file = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ")
        if uploaded_file is not None:
            df = get_df(uploaded_file)
            st.session_state['df'] = df            
            
        if st.session_state.get('df') is not None or st.session_state.get('print_result') is not None:
            st.header('–ö—Ä–æ–∫ 2. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')
            config_params(st.session_state['df'])
            if st.session_state.get('norm_params'):
                confirm_params = st.button('–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º')
                if confirm_params:
                    
                    dct = {
                            'poly_type': st.session_state['method'], # 
                            'input_file': st.session_state['df'],
                            'samples': st.session_state['samples'],
                            'dimensions': [st.session_state[i] for i in ['dim_x1', 'dim_x2', 'dim_x3', 'dim_y']], # rozmirnist' vectoriv (x1,x2,x3,y)
                            'degrees': [st.session_state[i] for i in ['st_x1', 'st_x2', 'st_x3']], # stepin' polinoma
                            'weights': st.session_state['weights'], # vagi (scaled/average)
                            'lambda_multiblock': int(st.session_state['lambda_multiblock']),
                            'is_save': True
                        }
                    solver = Solve(dct)
                    buffer, err = solver.prepare()
                    st.session_state['buffer'] = buffer
                    
                    solution = PolynomialBuilder(solver)
                    print_result = solution.get_results()
                    st.session_state['print_result'] = print_result
                    st.session_state['solution'] = solution
                    if print_result:
                        st.success('–£—Å–ø—ñ—Ö! –ü–µ—Ä–µ—Ö–æ–¥—å—Ç–µ —É —Ä–æ–∑–¥—ñ–ª "–î–æ—Å–ª—ñ–¥–∂—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏"')
                        st.balloons()


    if select_menu == "–î–æ—Å–ª—ñ–¥–∂—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏":
        
        if st.session_state.get('print_result') is None:
            st.error("–í–∏ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –∞–ª–≥–æ—Ä–∏—Ç–º. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫—Ä–æ–∫")
        else:
            st.header('–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–±–æ—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—É')
            title = st.text_input('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç—É—é—á–∏—Ö –¥–∞–Ω–∏—Ö —Ç–∞ –º–Ω–æ–≥–æ—á–ª–µ–Ω—ñ–≤', 'results polinoms')
            st.download_button(
                    label="–í–∏–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏",
                    data=st.session_state['buffer'],
                    file_name=f"{title.split()[0]}.xlsx",
                    mime="application/vnd.ms-excel"
                    )
            
            plots(st.session_state['solution'])
            
            st.download_button(
                    label="–í–∏–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∏",
                    data=st.session_state['print_result'].replace('**','').replace('\\',''),
                    file_name=f"{title.split()[1]}.txt")
            
            st.write(st.session_state['print_result'])
            
main()
